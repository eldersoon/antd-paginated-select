name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      # Deixe o token disponível para todo o job (npm respeita NODE_AUTH_TOKEN)
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org/"
          # Se sua org npm exige provenance, habilite:
          # provenance: true

      - name: Install
        run: pnpm install --frozen-lockfile

      # AUTENTICAÇÃO À PROVA DE FALHAS: grava token no HOME e na raiz do projeto,
      # e fixa registry no npm e pnpm
      - name: Configure npm auth (home and project)
        run: |
          printf "//registry.npmjs.org/:_authToken=%s\nalways-auth=true\n" "$NPM_TOKEN" > ~/.npmrc
          printf "//registry.npmjs.org/:_authToken=%s\nalways-auth=true\n" "$NPM_TOKEN" > .npmrc
          npm config set registry "https://registry.npmjs.org/"
          pnpm config set registry "https://registry.npmjs.org/"
          # Add .npmrc to gitignore to prevent committing secrets
          echo ".npmrc" >> .gitignore

      # VALIDAÇÃO: verificar autenticação e acesso à organização
      - name: Validate npm auth & org access
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -e
          echo "node: $(node -v)"
          echo "npm:  $(npm -v)"
          echo "npm registry: $(npm config get registry)"
          echo "pnpm registry: $(pnpm config get registry || true)"

          # Confirma que existe uma linha de auth (mas sem vazar o token)
          if grep -q "_authToken=" ~/.npmrc; then echo "~/.npmrc tem _authToken"; else echo "FALTA token em ~/.npmrc" && exit 1; fi
          if [ -f .npmrc ] && grep -q "_authToken=" .npmrc; then echo "./.npmrc tem _authToken"; else echo "AVISO: ./.npmrc não encontrado ou sem token"; fi

          # Testes de rede + identidade usando o token
          npm ping
          echo "whoami: $(npm whoami)"

          # Verifica se o usuário pode publicar pacotes pessoais (@eldersoon)
          USER=$(npm whoami)
          if [ "$USER" = "eldersoon" ]; then
            echo "✅ Token é do usuário 'eldersoon' - pode publicar pacotes @eldersoon/*"
          else
            echo "❌ Token é do usuário '$USER' mas tentando publicar @eldersoon/*"
            echo "Use um token do usuário 'eldersoon' ou mude o scope do pacote para @$USER/*"
            exit 1
          fi

      # Verificar se há changesets para processar
      - name: Check for changesets
        id: check_changesets
        run: |
          if [ -d ".changeset" ] && [ "$(ls -A .changeset | grep -v README.md | wc -l)" -gt 0 ]; then
            echo "has_changesets=true" >> $GITHUB_OUTPUT
          else
            echo "has_changesets=false" >> $GITHUB_OUTPUT
          fi

      # Se há changesets, processar versão e publicar diretamente
      - name: Version and Publish packages
        if: steps.check_changesets.outputs.has_changesets == 'true'
        run: |
          echo "📦 Processing changesets and publishing..."
          pnpm changeset version
          echo "🔨 Building packages..."
          pnpm run build
          echo "🚀 Publishing to npm..."
          pnpm -w changeset publish

            # Criar release no GitHub se publicou com sucesso
      - name: Create GitHub Release
        if: steps.check_changesets.outputs.has_changesets == 'true'
        run: |
          # Pegar a nova versão do package.json
          VERSION=$(node -p "require('./packages/paginated-select/package.json').version")
          PACKAGE_NAME=$(node -p "require('./packages/paginated-select/package.json').name")

          # Verificar se a tag já existe
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "🏷️ Tag v$VERSION já existe, pulando criação"
          else
            # Criar tag e release
            git tag "v$VERSION"
            git push origin "v$VERSION"
            echo "🏷️ Created tag v$VERSION"
          fi

          echo "✅ Published $PACKAGE_NAME@$VERSION"
